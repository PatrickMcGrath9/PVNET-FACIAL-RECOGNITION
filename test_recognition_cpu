import face_recognition
import cv2
import numpy as np
import pickle
import pyttsx3
import time
import threading

# Adjust frame processing frequency
frame_skip = 3  # Process every third frame
frame_count = 0

# Adjust the scaling factor for faster processing
scaling_frame = 1.5  # Adjust the scaling to a reasonable size for better performance
going_back_frame = 1 / scaling_frame

# Load the known faces and encodings
with open("encodings.pkl", "rb") as f:
    known_face_encodings, known_face_names, _ = pickle.load(f)

# Initialize TTS engine
engine = pyttsx3.init()

# Track the last time each person was recognized
last_spoken_time = {}
face_detection_time = {}

# Time limits
SPEAK_INTERVAL = 3600  # 1 hour
DETECTION_TIME_REQUIRED = 0.5  # Half-second

# Initialize some variables
face_locations = []
face_encodings = []
face_names = []

# Get a reference to the webcam
video_capture = cv2.VideoCapture(0)
video_capture.set(cv2.CAP_PROP_FRAME_WIDTH, 640)
video_capture.set(cv2.CAP_PROP_FRAME_HEIGHT, 480)

def speak_name(name):
    """Threaded function to speak a person's name using TTS."""
    engine.say(f"Hello {name}")
    engine.runAndWait()

while True:
    ret, frame = video_capture.read()

    if frame_count % frame_skip == 0:
        start_time = time.time()

        # Resize frame for faster processing
        small_frame = cv2.resize(frame, (0, 0), fx=scaling_frame, fy=scaling_frame)
        rgb_small_frame = np.ascontiguousarray(small_frame[:, :, ::-1])

        # Face detection and encoding (CPU)
        face_locations = face_recognition.face_locations(rgb_small_frame, model="hog")
        face_encodings = face_recognition.face_encodings(rgb_small_frame, face_locations)

        face_names = []
        for (top, right, bottom, left), face_encoding in zip(face_locations, face_encodings):
            face_distances = face_recognition.face_distance(known_face_encodings, face_encoding)
            best_match_index = np.argmin(face_distances)
            matches = face_distances <= 0.6

            name = "Unknown"
            if matches[best_match_index]:
                name = known_face_names[best_match_index]

                current_time = time.time()
                if name not in face_detection_time:
                    face_detection_time[name] = current_time

                if current_time - face_detection_time[name] >= DETECTION_TIME_REQUIRED:
                    if name not in last_spoken_time or (current_time - last_spoken_time[name]) > SPEAK_INTERVAL:
                        threading.Thread(target=speak_name, args=(name,)).start()
                        last_spoken_time[name] = current_time

            face_names.append(name)

        for name in list(face_detection_time.keys()):
            if name not in face_names:
                del face_detection_time[name]

        end_time = time.time()
        cpu_time = end_time - start_time
        print(f"CPU time: {cpu_time:.4f} seconds")

    frame_count += 1

    # Display the results
    for (top, right, bottom, left), name in zip(face_locations, face_names):
        top = int(top * going_back_frame)
        right = int(right * going_back_frame)
        bottom = int(bottom * going_back_frame)
        left = int(left * going_back_frame)

        cv2.rectangle(frame, (left, top), (right, bottom), (0, 0, 255), 2)
        cv2.rectangle(frame, (left, bottom - 35), (right, bottom), (0, 0, 255), cv2.FILLED)
        font = cv2.FONT_HERSHEY_DUPLEX
        cv2.putText(frame, name, (left + 6, bottom - 6), font, 1.0, (255, 255, 255), 1)

    cv2.imshow('Video', frame)

    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

video_capture.release()
cv2.destroyAllWindows()
